{"version":3,"sources":["ToDoItem/ToDoItem.js","Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["ToDoItem","props","className","type","defaultChecked","completed","id","itemId","onChange","handleChange","htmlFor","description","onClick","onDeleteHandler","Header","App","todosData","localStorage","length","JSON","parse","getItem","useState","todos","setTodos","inputs","setInputs","activeTasks","filter","task","completedTasks","finalTasks","map","item","key","text","newState","setItem","stringify","value","event","target","Math","round","random","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iSAoBeA,G,MAhBE,SAAAC,GAEb,OACI,yBAAKC,UAAU,aACX,2BACAC,KAAK,WACLC,eAAgBH,EAAMI,UACtBC,GAAML,EAAMM,OACZC,SAAUP,EAAMQ,eAEhB,2BAAOP,UAAU,cAAcQ,QAAST,EAAMM,QAASN,EAAMU,aAC7D,4BAAQT,UAAY,eAAeU,QAASX,EAAMY,iBAAlD,iDCNGC,G,MANA,WACX,OACI,wBAAIZ,UAAU,UAAd,gB,MCgEOa,MA/Df,WAEE,IAAIC,EACsBA,EAA1BC,aAAaC,OAAS,EAAgB,GAAiBC,KAAKC,MAAMH,aAAaI,QAAQ,cAHzE,MAKcC,mBAASN,GALvB,mBAKLO,EALK,KAKEC,EALF,OAMgBF,mBAAS,IANzB,mBAMLG,EANK,KAMGC,EANH,KAiCNC,EAAcJ,EAAMK,QAAO,SAAAC,GAAI,OAAuB,IAAnBA,EAAKxB,aACxCyB,EAAiBP,EAAMK,QAAO,SAAAC,GAAI,OAAuB,IAAnBA,EAAKxB,aAC3C0B,EAAa,sBAAIJ,GAAJ,YAAmBG,IAAgBE,KAAI,SAAAC,GAC1D,OACE,kBAAC,EAAD,CACEC,IAAKD,EAAK3B,GACVC,OAAU0B,EAAK3B,GACfK,YAAasB,EAAKE,KAClB9B,UAAW4B,EAAK5B,UAChBI,aAAe,kBAjCA,SAAAH,GACnB,IAAM8B,EAAWb,EAAMS,KAAI,SAAAC,GAAI,OAC7BA,EAAK3B,KAAOA,EAAZ,eAAqB2B,EAArB,CAA2B5B,WAAY4B,EAAK5B,YAAa4B,KACzDT,EAASY,GA8Bc3B,CAAawB,EAAK3B,KACvCO,gBAAiB,kBAhBD,SAAAP,GACtB,IAAM8B,EAAWb,EAAMK,QAAO,SAAAK,GAAI,OAAIA,EAAK3B,KAAOA,KAClDkB,EAASY,GAcoBvB,CAAgBoB,EAAK3B,UAOlD,OAFAW,aAAaoB,QAAQ,YAAalB,KAAKmB,UAAUf,IAG/C,yBAAKrB,UAAU,OACf,yBAAKA,UAAU,oBACb,kBAAC,EAAD,MACC6B,EACD,2BAAO7B,UAAU,YAAYqC,MAAOd,GAAU,GAAIjB,SAAU,SAAAgC,GAAK,OAAId,EAAUc,EAAMC,OAAOF,UAC5F,4BAAQrC,UAAU,aAAaU,QAzCf,WAClB,IAKMwB,EAAQ,CALK,CACf9B,GAAIoC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBT,KAAMV,EACNpB,WAAW,IAED,mBAAmBkB,IACjCG,EAAU,IACVF,EAASY,KAiCP,gFClDcS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.258bc913.chunk.js","sourcesContent":["import React from 'react'\nimport './ToDoItem.scss'\n\n\nconst ToDoItem = props => {\n   \n    return (\n        <div className=\"todo-item\">\n            <input \n            type=\"checkbox\" \n            defaultChecked={props.completed} \n            id = {props.itemId}\n            onChange={props.handleChange}\n            />\n            <label className=\"description\" htmlFor={props.itemId}>{props.description}</label> \n            <button className = \"deleteButton\" onClick={props.onDeleteHandler}>Удалить</button>\n        </div>\n    )\n}\n\nexport default ToDoItem","import React from 'react'\nimport './Header.scss'\n\nconst Header = () => {\n    return (\n        <h1 className=\"header\">To Do List</h1>\n    )\n}\n\nexport default Header","import React, {useState} from 'react';\nimport ToDoItem from './ToDoItem/ToDoItem'\nimport Header from './Header/Header'\nimport './App.scss';\n\n\nfunction App () {\n\n  let todosData;\n  localStorage.length < 1 ? todosData = [] : todosData = JSON.parse(localStorage.getItem('toDoItems'))\n\n    const [todos, setTodos] = useState(todosData)\n    const [inputs, setInputs] = useState('');\n    \n\n  const handleChange = id => {\n    const newState = todos.map(item =>\n      item.id === id ? {...item, completed: !item.completed} : item)\n      setTodos(newState)\n  }\n\n  const addToDoItem = () => {\n    const inputValue = {\n        id: Math.round(Math.random() * 10000000),\n        text: inputs,\n        completed: false\n    };\n    const newState = [inputValue, ...todos];\n    setInputs('');\n    setTodos(newState)\n  }\n\n\nconst onDeleteHandler = id => {\n  const newState = todos.filter(item => item.id !== id);\n  setTodos(newState);\n}\n\n \n    const activeTasks = todos.filter(task => task.completed === false);\n    const completedTasks = todos.filter(task => task.completed === true);\n    const finalTasks = [...activeTasks,...completedTasks].map(item => {\n    return (\n      <ToDoItem\n        key={item.id}\n        itemId = {item.id}\n        description={item.text}\n        completed={item.completed}\n        handleChange={ () => handleChange(item.id)}\n        onDeleteHandler={() => onDeleteHandler(item.id)}\n      />\n    )\n  })\n\n  localStorage.setItem('toDoItems', JSON.stringify(todos));\n \n  return (\n    <div className=\"App\">\n    <div className=\"toDoList-wrapper\">\n      <Header/>\n      {finalTasks}\n      <input className=\"toDoInput\" value={inputs || ''} onChange={event => setInputs(event.target.value)}/>\n      <button className=\"toDoButton\" onClick={addToDoItem}>Добавить дело</button>\n    </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}